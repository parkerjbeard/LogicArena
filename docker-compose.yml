services:
  # API Gateway
  gateway:
    build: ./gateway
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - SECRET_KEY=${SECRET_KEY}
      - CSRF_SECRET=${CSRF_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - PROOF_CHECKER_URL=http://proof-checker:5003
      - LOGSTASH_HOST=logstash
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-True}
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - VERIFICATION_CACHE_ENABLED=true
      - VERIFICATION_CACHE_TTL=3600
      - VERIFICATION_MAX_WORKERS=10
      - VERIFICATION_BATCH_SIZE=20
      - VERIFICATION_INTERVAL=300
      - VERIFY_PUZZLES_ON_SEED=${VERIFY_PUZZLES_ON_SEED:-true}
      - CONTINUOUS_VERIFICATION_ENABLED=${CONTINUOUS_VERIFICATION_ENABLED:-true}
    volumes:
      - ./shared:/app/shared:ro
    restart: always
    networks:
      - logic_network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service_name=gateway,application=logicarena"

  # Frontend
  front:
    build: ./front
    ports:
      - "3000:3000"
    environment:
      - API_URL=http://gateway:8000
      - WS_URL=ws://gateway:8000
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:8000}
      - SENTRY_DSN_FRONTEND=${SENTRY_DSN_FRONTEND:-}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    restart: always
    networks:
      - logic_network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service_name=frontend,application=logicarena"

  # Matchmaking Service
  match:
    build: ./match
    depends_on:
      - redis
      - postgres
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - LOGSTASH_HOST=logstash
      - SENTRY_DSN=${SENTRY_DSN:-}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./shared:/app/shared:ro
    restart: always
    networks:
      - logic_network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service_name=matchmaking,application=logicarena"

  # Puzzle Service
  puzzle:
    build: ./puzzle
    depends_on:
      - postgres
      - redis
      - proof-checker
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - PROOF_CHECKER_URL=http://proof-checker:5003
      - LOGSTASH_HOST=logstash
      - SENTRY_DSN=${SENTRY_DSN:-}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./shared:/app/shared:ro
    restart: always
    networks:
      - logic_network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service_name=puzzle,application=logicarena"

  # Proof Checker Service
  proof-checker:
    build: 
      context: ./proof-checker
      dockerfile: Dockerfile.simple
    ports:
      - "5003:5003"
    environment:
      - LOGSTASH_HOST=logstash
      - SENTRY_DSN=${SENTRY_DSN:-}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./shared:/app/shared:ro
    restart: always
    networks:
      - logic_network
    deploy:
      resources:
        limits:
          memory: 256M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service_name=proof-checker,application=logicarena"

  # Rating Service
  rating:
    build: ./rating
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - LOGSTASH_HOST=logstash
      - SENTRY_DSN=${SENTRY_DSN:-}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./shared:/app/shared:ro
    restart: always
    networks:
      - logic_network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service_name=rating,application=logicarena"

  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-logicuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-logicarena}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - logic_network

  # Redis for Caching and Pub/Sub
  redis:
    image: redis:7
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - logic_network

networks:
  logic_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: 