version: '3.8'

services:
  # Nginx Reverse Proxy for Green-Blue switching
  nginx:
    image: nginx:alpine
    container_name: logicarena_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    restart: always
    networks:
      - logic_network
    depends_on:
      - postgres
      - redis

  # PostgreSQL Database (Shared)
  postgres:
    image: postgres:15
    container_name: logicarena_postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-logicuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-logicarena}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    restart: always
    networks:
      - logic_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-logicuser}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Pub/Sub (Shared)
  redis:
    image: redis:7-alpine
    container_name: logicarena_redis
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - logic_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: logicarena_jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
      - "6831:6831/udp" # Jaeger agent
    restart: always
    networks:
      - logic_network

  # Proof Checker Service (Shared)
  proof-checker:
    build: 
      context: ./proof-checker
      dockerfile: Dockerfile.simple
    container_name: logicarena_proof_checker
    expose:
      - "5003"
    environment:
      - SENTRY_DSN=${SENTRY_DSN:-}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./shared:/app/shared:ro
    restart: always
    networks:
      - logic_network
    deploy:
      resources:
        limits:
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  logic_network:
    driver: bridge
    name: logic_network

volumes:
  postgres_data:
  redis_data: