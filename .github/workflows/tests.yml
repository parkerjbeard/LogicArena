name: Run All Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_call:  # Allow this workflow to be called by other workflows

env:
  REDIS_URL: redis://localhost:6379
  DATABASE_URL: postgresql://testuser:testpass@localhost:5432/test_db
  SECRET_KEY: test-secret-key-for-ci
  POSTGRES_DB: test_db
  POSTGRES_USER: testuser
  POSTGRES_PASSWORD: testpass
  NODE_ENV: test
  DOCKER_BUILD: true

jobs:
  frontend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: front/package-lock.json

      - name: Install dependencies
        working-directory: front
        run: npm ci

      - name: Create test environment file
        working-directory: front
        run: |
          cat > .env.test << EOF
          NEXT_PUBLIC_API_URL=http://localhost:8000
          NEXT_PUBLIC_WS_URL=ws://localhost:8000
          NEXT_PUBLIC_SUPABASE_URL=https://test.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY=test-anon-key
          EOF

      - name: Run linting
        working-directory: front
        run: npm run lint || true  # Don't fail on lint errors for now

      - name: Run type checking
        working-directory: front
        run: npm run typecheck

      - name: Run unit tests
        working-directory: front
        run: npm run test -- --coverage --watchAll=false

      - name: Build frontend
        working-directory: front
        run: npm run build

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage-${{ matrix.node-version }}
          path: front/coverage/

  backend-unit-tests:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        service: [gateway, match, puzzle, rating]
        python-version: [3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles(format('{0}/requirements*.txt', matrix.service)) }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.service }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-timeout httpx

      - name: Wait for services
        run: |
          sleep 10
          redis-cli -h localhost ping
          pg_isready -h localhost -p 5432 -U testuser

      - name: Run unit tests
        working-directory: ${{ matrix.service }}
        env:
          PYTHONPATH: ${{ github.workspace }}/shared:${{ github.workspace }}/${{ matrix.service }}
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-jwt-secret
          SECRET_KEY: test-secret-key
          CSRF_SECRET: test-csrf-secret
          PROOF_CHECKER_URL: http://localhost:5003
          VERIFY_PUZZLES_ON_SEED: false
          CONTINUOUS_VERIFICATION_ENABLED: false
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing -m "not integration and not e2e" || true

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-coverage
          path: ${{ matrix.service }}/htmlcov/

  proof-checker-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        working-directory: proof-checker
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        working-directory: proof-checker
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: proof-checker-coverage
          path: proof-checker/htmlcov/

  integration-tests:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-unit-tests]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio websockets httpx

      - name: Start proof-checker service
        working-directory: proof-checker
        run: |
          pip install -r requirements.txt
          python app.py &
          sleep 5

      - name: Run gateway integration tests
        working-directory: gateway
        env:
          PYTHONPATH: ${{ github.workspace }}/shared:${{ github.workspace }}/gateway
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          PROOF_CHECKER_URL: http://localhost:5003
          JWT_SECRET: test-jwt-secret
          SECRET_KEY: test-secret-key
          CSRF_SECRET: test-csrf-secret
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-timeout httpx
          pytest tests/ -v -m "integration" --tb=short || true

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './front'
          format: 'sarif'
          output: 'trivy-frontend.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './gateway'
          format: 'sarif'
          output: 'trivy-backend.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-*.sarif'

  test-summary:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-unit-tests, proof-checker-tests, integration-tests, security-scan]
    if: always()
    steps:
      - name: Test Summary
        run: |
          echo "## Test Results Summary 🧪" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Status" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Unit Tests | ${{ needs.backend-unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Proof Checker Tests | ${{ needs.proof-checker-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '⚠️ Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check overall status
          if [[ "${{ needs.frontend-tests.result }}" == "failure" || \
                "${{ needs.backend-unit-tests.result }}" == "failure" || \
                "${{ needs.proof-checker-tests.result }}" == "failure" ]]; then
            echo "### ❌ Tests Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs for failing tests." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "### ✅ All Tests Passed" >> $GITHUB_STEP_SUMMARY
          fi