name: WebSocket Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'gateway/app/websocket/**'
      - 'gateway/tests/**'
      - 'match/app.py'
      - 'match/tests/**'
      - 'front/src/lib/websocket.ts'
      - 'front/src/lib/__tests__/**'
      - '.github/workflows/websocket-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'gateway/app/websocket/**'
      - 'gateway/tests/**'
      - 'match/app.py'
      - 'match/tests/**'
      - 'front/src/lib/websocket.ts'
      - 'front/src/lib/__tests__/**'
      - '.github/workflows/websocket-tests.yml'

env:
  REDIS_URL: redis://localhost:6379
  DATABASE_URL: postgresql://testuser:testpass@localhost:5432/test_db
  SECRET_KEY: test-secret-key-for-ci
  POSTGRES_DB: test_db
  POSTGRES_USER: testuser
  POSTGRES_PASSWORD: testpass

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: [3.11]
        service: [gateway, match]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles(format('{0}/requirements*.txt', matrix.service)) }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.service }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ${{ matrix.service }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Wait for services
      run: |
        sleep 10
        redis-cli -h localhost ping
        pg_isready -h localhost -p 5432 -U testuser

    - name: Run unit tests
      working-directory: ${{ matrix.service }}
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing -m "not integration and not e2e"

    - name: Run integration tests
      working-directory: ${{ matrix.service }}
      run: |
        pytest tests/ -v --cov=app --cov-append --cov-report=xml --cov-report=term-missing -m "integration"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage
        fail_ci_if_error: false

  frontend-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: front/package-lock.json

    - name: Install dependencies
      working-directory: front
      run: npm ci

    - name: Run linting
      working-directory: front
      run: npm run lint

    - name: Run type checking
      working-directory: front
      run: npm run type-check

    - name: Run unit tests
      working-directory: front
      run: npm run test -- --coverage --watchAll=false

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: front/coverage
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'test:e2e')
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: front/package-lock.json

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio websockets httpx docker

    - name: Install frontend dependencies
      working-directory: front
      run: npm ci

    - name: Build frontend
      working-directory: front
      run: npm run build

    - name: Start services
      run: |
        docker-compose -f docker-compose.dev.yml up -d
        sleep 30  # Wait for all services to be ready

    - name: Wait for services health
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:8003/queue/status?user_id=1; do sleep 2; done'

    - name: Run e2e tests
      run: |
        cd tests/e2e
        pytest test_websocket_e2e.py -v -m "e2e" --tb=short

    - name: Collect service logs
      if: failure()
      run: |
        mkdir -p logs
        docker-compose -f docker-compose.dev.yml logs > logs/services.log

    - name: Upload logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: service-logs
        path: logs/

    - name: Stop services
      if: always()
      run: |
        docker-compose -f docker-compose.dev.yml down -v

  test-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.backend-tests.result }}" == "failure" || "${{ needs.frontend-tests.result }}" == "failure" ]]; then
          echo "❌ Some tests failed"
          exit 1
        else
          echo "✅ All tests passed"
        fi

    - name: Test Summary
      if: always()
      run: |
        echo "## WebSocket Test Results 🧪" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.e2e-tests.result }}" != "skipped" ]]; then
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        fi