name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag/version to deploy (leave empty for latest)'
        required: false
        default: 'stable'
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/logicarena

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    outputs:
      deploy: ${{ steps.check.outputs.deploy }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check deployment conditions
        id: check
        run: |
          # For manual deployments
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
            echo "version=${{ github.event.inputs.tag || 'stable' }}" >> $GITHUB_OUTPUT
          # For release deployments
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
            echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Verify images exist
        if: steps.check.outputs.deploy == 'true'
        run: |
          VERSION=${{ steps.check.outputs.version }}
          SERVICES=(frontend gateway match puzzle rating proof-checker)
          
          for service in "${SERVICES[@]}"; do
            echo "Checking ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${service}:${VERSION}"
            docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${service}:${VERSION} || \
              (echo "Image not found for ${service}:${VERSION}" && exit 1)
          done

  backup-database:
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.deploy == 'true'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Create database backup
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            # Create backup directory
            mkdir -p ~/backups/logicarena
            
            # Backup database
            BACKUP_FILE=~/backups/logicarena/db-backup-$(date +%Y%m%d-%H%M%S).sql
            docker exec logicarena-postgres-1 pg_dump -U ${{ secrets.PRODUCTION_DB_USER }} logicarena > $BACKUP_FILE
            gzip $BACKUP_FILE
            
            # Keep only last 7 days of backups
            find ~/backups/logicarena -name "*.sql.gz" -mtime +7 -delete
            
            echo "Database backup completed: ${BACKUP_FILE}.gz"

  deploy:
    needs: [pre-deployment-checks, backup-database]
    if: needs.pre-deployment-checks.outputs.deploy == 'true'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/logicarena
            
            # Store the version to deploy
            VERSION=${{ needs.pre-deployment-checks.outputs.version }}
            
            # Create deployment script
            cat > deploy-prod.sh << 'EOF'
            #!/bin/bash
            set -e
            
            VERSION=$1
            echo "🚀 Starting production deployment of version: $VERSION"
            
            # Update environment file
            cat > .env << EOL
            DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}
            REDIS_URL=${{ secrets.PRODUCTION_REDIS_URL }}
            JWT_SECRET=${{ secrets.PRODUCTION_JWT_SECRET }}
            SECRET_KEY=${{ secrets.PRODUCTION_SECRET_KEY }}
            CSRF_SECRET=${{ secrets.PRODUCTION_CSRF_SECRET }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.PRODUCTION_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.PRODUCTION_SUPABASE_ANON_KEY }}
            CORS_ORIGINS=${{ secrets.PRODUCTION_CORS_ORIGINS }}
            FRONTEND_URL=${{ secrets.PRODUCTION_FRONTEND_URL }}
            NEXT_PUBLIC_API_URL=${{ secrets.PRODUCTION_API_URL }}
            NEXT_PUBLIC_WS_URL=${{ secrets.PRODUCTION_WS_URL }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            SENTRY_DSN_FRONTEND=${{ secrets.SENTRY_DSN_FRONTEND }}
            ENVIRONMENT=production
            EOL
            
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Create docker-compose override for production
            cat > docker-compose.override.yml << EOL
            services:
              front:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend:${VERSION}
                restart: always
              gateway:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-gateway:${VERSION}
                restart: always
              match:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-match:${VERSION}
                restart: always
              puzzle:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-puzzle:${VERSION}
                restart: always
              rating:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-rating:${VERSION}
                restart: always
              proof-checker:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-proof-checker:${VERSION}
                restart: always
            EOL
            
            # Pull new images
            echo "📦 Pulling new images..."
            docker-compose pull
            
            # Rolling update - Update one service at a time
            echo "🔄 Starting rolling update..."
            
            # Update backend services first
            for service in proof-checker rating puzzle match gateway; do
              echo "Updating $service..."
              docker-compose up -d --no-deps $service
              sleep 10
              # Health check
              docker-compose ps $service | grep -q "Up" || exit 1
            done
            
            # Update frontend last
            echo "Updating frontend..."
            docker-compose up -d --no-deps front
            sleep 15
            
            # Run database migrations
            echo "🔄 Running database migrations..."
            docker-compose exec -T gateway alembic upgrade head
            
            # Verify all services are running
            echo "🏥 Verifying deployment..."
            docker-compose ps
            
            # Health checks
            curl -f http://localhost:8000/health || exit 1
            curl -f http://localhost:3000 || exit 1
            
            # Clean up old images
            docker image prune -f
            
            echo "✅ Production deployment completed successfully!"
            EOF
            
            chmod +x deploy-prod.sh
            ./deploy-prod.sh $VERSION

      - name: Run post-deployment tests
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/logicarena
            
            # Test API endpoints
            echo "Testing API endpoints..."
            curl -f http://localhost:8000/health
            curl -f http://localhost:8000/api/puzzles
            
            # Test frontend
            echo "Testing frontend..."
            curl -f http://localhost:3000
            
            # Check WebSocket endpoint
            curl -f -I http://localhost:8000/ws

      - name: Create deployment record
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: `Deploy version ${{ needs.pre-deployment-checks.outputs.version }}`,
              production_environment: true,
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ secrets.PRODUCTION_URL }}',
              description: 'Deployment completed successfully'
            });

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Production deployment ${{ job.status == 'success' && 'succeeded' || 'failed' }}!
            Version: ${{ needs.pre-deployment-checks.outputs.version }}
            Deployed by: ${{ github.actor }}
            Environment: ${{ secrets.PRODUCTION_URL }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  rollback:
    needs: [deploy]
    if: failure()
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Rollback deployment
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/logicarena
            
            echo "⚠️ Deployment failed, rolling back to previous version..."
            
            # Restore from stable tag
            cat > docker-compose.override.yml << EOF
            services:
              front:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend:stable
              gateway:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-gateway:stable
              match:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-match:stable
              puzzle:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-puzzle:stable
              rating:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-rating:stable
              proof-checker:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-proof-checker:stable
            EOF
            
            docker-compose pull
            docker-compose up -d
            
            echo "✅ Rollback completed"