FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Add libc6-compat for better compatibility
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files
COPY package*.json ./
# Use npm ci for faster, more reliable builds
RUN npm ci --only=production

# Development dependencies (separate layer)
FROM base AS dev-deps
WORKDIR /app
COPY package*.json ./
RUN npm ci

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=dev-deps /app/node_modules ./node_modules
COPY . .

# Set build-time environment variables
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV production

# Build the application with optimizations
RUN npm run build:prod

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

# Install compression tools
RUN apk add --no-cache \
    # For serving compressed assets
    gzip \
    brotli

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy public assets
COPY --from=builder /app/public ./public

# Automatically leverage output traces to reduce image size
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy configuration files
COPY --chown=nextjs:nodejs nginx.conf /etc/nginx/conf.d/default.conf

# Pre-compress static assets
RUN find .next/static -type f \( -name "*.js" -o -name "*.css" -o -name "*.html" \) -exec gzip -k {} \; \
    && find .next/static -type f \( -name "*.js" -o -name "*.css" -o -name "*.html" \) -exec brotli -k {} \;

USER nextjs

EXPOSE 3000

ENV PORT 3000
# Optimize Node.js memory usage
ENV NODE_OPTIONS="--max-old-space-size=512"

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (r) => r.statusCode === 200 ? process.exit(0) : process.exit(1))"

CMD ["node", "server.js"]