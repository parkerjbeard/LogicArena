version: '3.8'

services:
  # API Gateway - Blue
  gateway-blue:
    build: ./gateway
    container_name: logicarena_gateway_blue
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - SECRET_KEY=${SECRET_KEY}
      - CSRF_SECRET=${CSRF_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - PROOF_CHECKER_URL=http://proof-checker:5003
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - ENVIRONMENT=staging-blue
      - DEBUG=${DEBUG:-False}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEPLOYMENT_COLOR=blue
      - TRACING_ENABLED=true
      - SERVICE_NAME=logicarena-gateway-blue
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      - OTLP_ENABLED=false
    volumes:
      - ./shared:/app/shared:ro
    restart: always
    networks:
      - logic_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "deployment=blue"
      - "service=gateway"

  # Frontend - Blue
  front-blue:
    build: ./front
    container_name: logicarena_front_blue
    expose:
      - "3000"
    environment:
      - API_URL=http://gateway-blue:8000
      - WS_URL=ws://gateway-blue:8000
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost/api}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost/ws}
      - SENTRY_DSN_FRONTEND=${SENTRY_DSN_FRONTEND:-}
      - ENVIRONMENT=staging-blue
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - DEPLOYMENT_COLOR=blue
    restart: always
    networks:
      - logic_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "deployment=blue"
      - "service=frontend"

  # Matchmaking Service - Blue
  match-blue:
    build: ./match
    container_name: logicarena_match_blue
    depends_on:
      - redis
      - postgres
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - SENTRY_DSN=${SENTRY_DSN:-}
      - ENVIRONMENT=staging-blue
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEPLOYMENT_COLOR=blue
    volumes:
      - ./shared:/app/shared:ro
    restart: always
    networks:
      - logic_network
    labels:
      - "deployment=blue"
      - "service=matchmaking"

  # Puzzle Service - Blue
  puzzle-blue:
    build: ./puzzle
    container_name: logicarena_puzzle_blue
    depends_on:
      - postgres
      - redis
      - proof-checker
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - PROOF_CHECKER_URL=http://proof-checker:5003
      - SENTRY_DSN=${SENTRY_DSN:-}
      - ENVIRONMENT=staging-blue
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEPLOYMENT_COLOR=blue
    volumes:
      - ./shared:/app/shared:ro
    restart: always
    networks:
      - logic_network
    labels:
      - "deployment=blue"
      - "service=puzzle"

  # Rating Service - Blue
  rating-blue:
    build: ./rating
    container_name: logicarena_rating_blue
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - SENTRY_DSN=${SENTRY_DSN:-}
      - ENVIRONMENT=staging-blue
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEPLOYMENT_COLOR=blue
    volumes:
      - ./shared:/app/shared:ro
    restart: always
    networks:
      - logic_network
    labels:
      - "deployment=blue"
      - "service=rating"

networks:
  logic_network:
    external: true